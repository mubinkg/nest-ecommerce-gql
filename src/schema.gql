# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TicketType {
  _id: String!
  title: String
}

type TicketCustomer {
  user_name: String
}

type Ticket {
  _id: String!
  ticket_type: TicketType
  user: TicketCustomer
  subject: String
  email: String
  description: String
  status: String
  created_at: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AdminTicketsDto {
  tickets: [Ticket!]
  count: Float
}

type AdminTicketTypeResponse {
  ticketTypes: [TicketType!]
  count: Float
}

type Brand {
  _id: String!
  name: String
  image: String
}

type Category {
  _id: String!
  name: String
  order: Float
  image: String
  banner: String
  parent: String
  status: String
}

type Seller {
  _id: String!
  name: String
  mobile: String
  email: String
  password: String
  address: String
  address_proof: String
  national_identity_card: String
  business_license: String
  account_number: String
  account_name: String
  bank_code: String
  bank_name: String
  isAdmin: Boolean
  status: String
}

type ProductAttributeSet {
  _id: String
  attributeSetName: String
  status: ActiveStatus
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
}

type ProductAttribute {
  _id: String
  name: String
  attributeSet: ProductAttributeSet
  values: [ProductAttributeValue!]
  status: ActiveStatus
}

type ProductAttributeValue {
  _id: String
  type: ProductAttributeValueType
  productAttribute: ProductAttribute
  valueName: String
  image: String
  color: String
  status: ActiveStatus
}

enum ProductAttributeValueType {
  DEFAULT
  COLOR
  IMAGE
}

type Attribute {
  _id: String!
  product: Product
  attribute: ProductAttribute
  values: [ProductAttributeValue!]
}

type ProductVariant {
  """Regular Price"""
  _id: String

  """Regular Price"""
  price: Float

  """Price after discount"""
  specialPrice: Float

  """Unit (kg)"""
  weight: Float

  """"""
  height: Float

  """"""
  breadth: Float

  """"""
  length: Float

  """Stock Keeping Unit"""
  sku: String

  """"""
  totalStock: Float

  """"""
  stockStatus: String

  """If variants is missing it will be general variant"""
  attributeReference: [String!]
  attributeValues: [ProductAttributeValue!]

  """Attribute Values"""
  attributes: ProductAttributeValue

  """Product Reference Id"""
  product: Product

  """Stock Keeping Unit"""
  stockType: String

  """Stock Keeping Unit"""
  productType: String
}

type Product {
  _id: String
  is_favorite: Boolean
  seller: Seller
  pro_input_name: String
  variant: String
  short_description: String
  tags: String
  indicator: String
  made_in: String
  brand: Brand
  total_allowed_quantity: Float
  minimum_order_quantity: Float
  quantity_step_size: Float
  warranty_period: String
  guarantee_period: String
  download_allowed: Float
  download_link_type: DownloadLinkType
  pro_input_zip: String
  download_link: String
  is_returnable: Float
  is_cancelable: Float
  cancelable_till: String
  pro_input_image: String
  other_images: [String!]
  video_type: String
  video: String
  pro_input_video: String
  pro_input_description: String
  extra_input_description: String
  attribute_values: String
  status: Float
  category: Category
  tax: Float
  product_type: String
  globalOrderNo: Float
  attributes: [Attribute!]
  productvariants: [ProductVariant!]
}

enum DownloadLinkType {
  NONE
  SELF_HOSTED
  ADD_LINK
}

type ProductResponse {
  _id: String
  is_favorite: Boolean
  seller: Seller
  pro_input_name: String
  variant: String
  short_description: String
  tags: String
  indicator: String
  made_in: String
  brand: Brand
  total_allowed_quantity: Float
  minimum_order_quantity: Float
  quantity_step_size: Float
  warranty_period: String
  guarantee_period: String
  download_allowed: Float
  download_link_type: DownloadLinkType
  pro_input_zip: String
  download_link: String
  is_returnable: Float
  is_cancelable: Float
  cancelable_till: String
  pro_input_image: String
  other_images: [String!]
  video_type: String
  video: String
  pro_input_video: String
  pro_input_description: String
  extra_input_description: String
  attribute_values: String
  status: Float
  category: Category
  tax: Float
  product_type: String
  globalOrderNo: Float
  attributes: [Attribute!]

  """Product Variants"""
  productvariants: [ProductVariant!]
}

type Favourite {
  _id: String
  product: ProductResponse
  user: String
}

type AmdinProductVariantResponse {
  count: Float
  productVariants: [ProductVariant!]!
}

type Stock {
  values: [ProductVariant!]
  product: Product
  stockType: String
  productType: String
}

type AdminStockDto {
  stock: [Stock!]
  count: Float
}

type AdminProductListResponseDto {
  products: [Product!]
  count: Float
}

type Area {
  _id: String!
  area_name: String
  city_id: String
  minimum_free_delivery_order_amount: Float
  delivery_charges: Float
}

type AdminAreaDto {
  areas: [Area!]
  count: Float
}

type City {
  _id: String!
  city_name: String
}

type AdminCities {
  cities: [City!]
  count: Float
}

type Customer {
  _id: String!
  name: String
  username: String
  address: String
  area: String
  city: String
  email: String
  mobile_no: String
  country_code: String
  currency: String
  wallet_amount: String
  language: String
  dob: DateTime
  height: Float
  weight: Float
  shoe_size: Float
  favourite_k_pop_group: String
  flavor: String
  referral_code: String
  friends_code: String
  image: String
  status: String
}

type AuthResponseDto {
  access_token: String!
  customer: Customer
}

type CustomerAdminDto {
  customers: [Customer!]
  count: Float
}

type CategoriesResponse {
  _id: String!
  name: String
  order: Float
  image: String
  banner: String
  parent: String
  status: String

  """Children Array are same as category"""
  children: [Category!]!
}

type AdminCategoryList {
  categories: [CategoriesResponse!]!
  count: Float!
}

type Address {
  _id: String!
  user: Customer
  type: String
  name: String
  country_code: String
  alternate_mobile: String
  address: String
  landmark: String
  area: Area
  city: City
  city_name: String
  area_name: String
  pincode_name: String
  pincode: String
  state: String
  country: String
  is_default: Int
}

type SliderType {
  _id: String!
  type: String
  type_id: Float
}

type Slider {
  _id: String!
  slider_type: SliderType
  type: SliderContentTypeEnum
  image: String
  link: String
  category: String
  product: String
}

enum SliderContentTypeEnum {
  OFFER
  SLIDER
}

type SliderProduct {
  _id: String
  pro_input_name: String
}

type SliderCategory {
  _id: String
  name: String
}

type SliderResponseDto {
  sliders: [Slider!]
  count: Float
}

type BrandList {
  brands: [Brand!]
  total: Float
}

type Rating {
  _id: String!
  product_id: String
  user_id: String
  rating: Float
  comment: String
  images: [String!]
  imageUrl: [String!]
  status: String
}

type PromoCode {
  _id: String
  promoCode: String
  message: String
  image: String
  discountType: DiscountType
  discountAmount: Float
  startDate: DateTime
  endDate: DateTime
  minOrderAmount: Float
  maxOrderAmount: Float
  numberOfUsers: Float
  numberOfUsedUser: Float
  usedUsers: [String!]
  repeatUsage: RepeatUsage
  numberOfRepeatUsage: Float
  isCashBack: Boolean
  status: ActiveStatus
  createdAt: DateTime
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

enum RepeatUsage {
  ALLOWED
  NOT_ALLOWED
}

type Cart {
  _id: String!
  user: Customer
  product_variant: ProductVariant
  is_saved_for_later: Float!
  qty: Float!
}

type CartResults {
  _id: String!
  user: Customer
  product_variant: ProductVariant
  is_saved_for_later: Float!
  qty: Float!
  product: Product
  attribute_values: [ProductAttributeValue!]
}

type Order {
  _id: String!
  user: Customer
  mobile: String
  product_variants: [ProductVariant!]
  quantity: [Float!]
  total: Float
  delivery_charge: Float
  final_total: Float
  promo_code: String
  promo_discount: Float
  payment_method: String
  address: Address
  is_wallet_used: Float
  wallet_balance_used: Float
  order_note: String
  documents: [String!]
  status: OrderStatus
  email: String
  created_at: DateTime
}

enum OrderStatus {
  RECEIVED
  DELIVERED
  CANCELLED
  PROCESSED
  SHIPPED
  RETURNED
}

type AdminOrderResponse {
  orders: [Order!]
  count: Float
}

type AdminSalesInventory {
  orders: Order
  count: Float
}

type SalesReportDto {
  orders: [Order!]
  count: Float
}

type GetProductAttributeSet {
  productAttributeSetList: [ProductAttributeSet!]
  count: Float
}

type ProductAttributeResponseDto {
  attributeList: [ProductAttribute!]
  count: Float
}

type AdminProductAttributeValuesResponse {
  count: Float
  values: [ProductAttributeValue!]
}

type ProductFaq {
  _id: String
  productId: String
  question: String
  ans: String
  createdAt: DateTime
}

type Aramic {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Faq {
  _id: String!
  product: Product
  question: String
  user: Seller
  ans: String
}

type FaqAdminDto {
  faqs: [Faq!]
  count: Float
}

type Section {
  _id: String
  title: String
  description: String
  order: Float
  categories: [String!]
  style: SectionStyle!
  productType: ProductTypes
  products: [Product!]
  createdAt: DateTime
}

enum SectionStyle {
  DEFAULT
  STYLE_ONE
  STYLE_TWO
  STYLE_THREE
}

enum ProductTypes {
  DIGITAL_PRODUCT
  CUSTOM_PRODUCT
}

type AdminSectionDto {
  sections: [Section!]
  count: Float
}

type SellerAuthResponse {
  seller: Seller
  access_token: String
}

type SellerList {
  sellers: [Seller!]
  total: Float
}

type Media {
  _id: String!
  name: String
  file: String
  extension: String
  type: String
  subDirectory: String
  size: Float
}

type AdminMedia {
  media: [Media!]
  count: Float
}

type DashboardTopContent {
  totalOrder: Float
  totalProduct: Float
  totalRating: Float
  rating: Float
  totalBalance: Float
}

type CategoryWiseProduct {
  count: Float
  category: Category
}

type StatusWiseOrderCountDto {
  _id: String
  statusCount: Float
}

type Transaction {
  _id: String!
  user: Customer
  type: TransactionType
  amount: Float
  status: TransactionStatusEnum
  message: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionStatusEnum {
  PENDING
  SUCCESS
}

type GetTransactionListDto {
  transactionList: [Transaction!]
  count: Float
}

type Withdrawal {
  _ids: String!
  userType: String
  seller: Seller
  customer: Customer
  paymentDetails: String
  amountRequested: Float
  remarks: String
  status: String
  createdAt: DateTime
}

type Notification {
  """Example field (placeholder)"""
  exampleField: Int!
}

type FlashSell {
  _id: String!
  product: Product
  endTime: DateTime
  status: String
}

type HotDeal {
  _id: String!
  product: Product
  validTime: DateTime
  discountPercent: Float
  status: String
  createdAt: DateTime
}

type Query {
  getTickets(getTicketDto: GetTicketsDto!): [Ticket!]!
  getAdminTickets(limit: Float!, offset: Float!): AdminTicketsDto!
  ticket(id: Int!): Ticket!
  getTicketTypes(limit: Float!, offset: Float!): [TicketType!]!
  getAdminTicketTypes(limit: Float!, offset: Float!): AdminTicketTypeResponse!
  get_products(getProductInput: GetProductDto!): [Product!]!
  getProductForWeb(getProductInput: GetProductDto!): [Product!]!
  product(productId: String!): Product!
  productForWeb(productId: String!): Product!
  getAdminProductList(adminProductListDto: AdminProductListDto!): AdminProductListResponseDto!
  getProductsForFeaturedSections(adminFeaturedSectionProductFilterInput: AdminFeaturedSectionProductFilterInput!): [Product!]!
  productVariants(limit: Float!, offset: Float!, query: String): AmdinProductVariantResponse!
  productVariant(values: [String!]!): ProductVariant!
  getAdminStockList(limit: Float!, offset: Float!): AdminStockDto!
  favourites(limit: Float!, offset: Float!): [Favourite!]!
  favourite(id: Int!): Favourite!
  areas: [Area!]!
  areaByCityId(city_id: String!): [Area!]!
  getAdminArea(limit: Float!, offset: Float!, query: String!): AdminAreaDto!
  getCities(limit: Float!, offset: Float!, query: String!): [City!]!
  city(id: Int!): City!
  adminCityList(limit: Float!, offset: Float!, query: String!): AdminCities!
  customer: Customer!
  signIn(signinInput: SignInDto!): AuthResponseDto!
  verifyUser(verifyUserInput: VerifyUser!): Boolean!
  customerAdminList(query: String!, limit: Float!, offset: Float!): CustomerAdminDto!
  categories(getCategoriesInput: GetCategoryDto!): [CategoriesResponse!]!
  getAdminCategories(getCategoriesInput: GetCategoryDto!): AdminCategoryList!
  getAllCategory: [Category!]!
  getAddresses(user_id: String!, limit: Float!, offset: Float!): [Address!]!
  sliders(limit: Float!, offset: Float!, type: String): [Slider!]!
  sliderTypeList(limit: Float!, offset: Float!): [SliderType!]!
  sliderType: [SliderType!]
  sliderProduct(query: String!): [SliderProduct!]
  sliderCategory(query: String!): [SliderCategory!]
  adminSliderList(limit: Float!, offset: Float!, type: String): SliderResponseDto!
  brands(limit: Float!, offset: Float!): [Brand!]!
  adminBrandList(limit: Float!, offset: Float!): BrandList!
  ratings(ratingFilterDto: RatingFilterDto!): [Rating!]!
  rating(id: Int!): Rating!
  getPromoCodes(getPromocodesInput: GetPromoCodesInput!): [PromoCode!]!
  getUserCart: [CartResults!]!
  cart(id: Int!): Cart!
  get_orders(getOrderDto: GetOrderDto!): [Order!]!
  order(orderId: String!): Order!
  getAdminOrderList(adminOrderListInput: GetAdminOrderInput!): AdminOrderResponse
  adminSalesInventory(limit: Float!, offset: Float!): AdminSalesInventory
  salesReport(limit: Float!, offset: Float!): SalesReportDto
  getProductAttributeSetList(limit: Float!, offset: Float!, query: String): GetProductAttributeSet
  productAttributes(limit: Float!, offset: Float!, query: String): ProductAttributeResponseDto!
  attributeValues(limit: Float!, offset: Float!, query: String): AdminProductAttributeValuesResponse!
  getAllProductAttribute: [ProductAttribute!]
  productFaq(id: Int!): ProductFaq!
  aramics: String!
  aramic(id: Int!): Aramic!
  faq(getFaqInput: GetFaqInput!): [Faq!]!
  adminFaqList(limit: Float!, offset: Float!): FaqAdminDto!
  getProductFaqList(limit: Float!, offset: Float!, productId: String!): FaqAdminDto!
  verifyOtp(phoneNumber: String!, otp: String!): Boolean
  getSections(getSectionInput: GetSectionsInput!): [Section!]!
  sectionForWeb(getSectionInput: GetSectionsInput!): [Section!]!
  getAdminSetions(limit: Float!, offset: Float!, query: String!): AdminSectionDto
  sellers(limit: Float!, offset: Float!, status: String): SellerList!
  seller(id: Int!): Seller!
  adminMedia(limit: Float!, offset: Float!, query: String): AdminMedia!
  media(id: Int!): Media!
  dashboardTopContent: DashboardTopContent
  sellerCategoryWiseProduct: [CategoryWiseProduct!]
  statusWiseOrderCount: [StatusWiseOrderCountDto!]!
  transactions(limit: Float!, offset: Float!): GetTransactionListDto!
  transaction(id: Int!): Transaction!
  withdrawal(id: Int!): Withdrawal!
  notification(id: Int!): Notification!
  flashSell(id: Int!): FlashSell!
  hotDeals(limit: Float!, offset: Float!): [HotDeal!]!
  hotDeal(id: Int!): HotDeal!
}

input GetTicketsDto {
  ticket_id: String
  ticket_type_id: String
  user_id: String
  status: TicketTypeEnum
  search: String
  limit: Float!
  offset: Float!
  sort: String
  order: String
}

enum TicketTypeEnum {
  PENDING
  RESOLVED
  REOPENED
}

input GetProductDto {
  category_id: String
  search: String
  tags: String
  attribute_value_ids: String
  limit: Float
  offset: Float
  sort: ProductSort = ID
  order: ProductOrder = DESC
  min_price: Float
  max_price: Float
  seller_id: String
}

enum ProductSort {
  ID
  DATE_ADDED
  PRICE
}

enum ProductOrder {
  ASC
  DESC
}

input AdminProductListDto {
  seller: String
  category: String
  status: String
  limit: Float!
  offset: Float!
}

input AdminFeaturedSectionProductFilterInput {
  limit: Float!
  offset: Float!
  categories: [String!]
  productType: String
}

input SignInDto {
  mobile_no: String!
  password: String!
}

input VerifyUser {
  email: String
  mobile: String!
}

input GetCategoryDto {
  id: String
  limit: Float
  offset: Float
  sort: String
  order: String
  has_child_or_item: Boolean
}

input RatingFilterDto {
  product_id: String
  user_id: String
  limit: Float = 25
  offset: Float = 0
  sort: SortingType! = CreateAt
  order: SortingOrder! = DESC
}

enum SortingType {
  CreateAt
}

enum SortingOrder {
  DESC
  ASC
}

input GetPromoCodesInput {
  limit: Float!
  offset: Float!
  sort: String! = "id"
  search: String! = "id"
  order: String! = "DESC"
}

input GetOrderDto {
  user_id: String!
  active_status: OrderStatus
  limit: Float = 25
  offset: Float = 0
  sort: OrderSortBy = ID
  order: OrderSortOrder = DESC
  download_invoice: Float
}

enum OrderSortBy {
  ID
  DATE_ADDED
}

enum OrderSortOrder {
  DESC
  AESC
}

input GetAdminOrderInput {
  limit: Float
  offset: Float
  start_date: DateTime
  end_date: DateTime
  status: OrderStatus
  payment_method: String
  product_type: String
}

input GetFaqInput {
  limit: Int!
  offset: Int!
  sort: String = "id"
  order: String = "DESC"
}

input GetSectionsInput {
  limit: Float! = 25
  offset: Float! = 0
  user_id: String
  section_id: String
  attribute_value_ids: [String!]
  top_rated_product: Float
  p_limit: Float! = 10
  p_offset: Float! = 0
  p_sort: String
  p_order: String
  discount: Float = 0
  min_price: Float = 0
  max_price: Float = 0
}

type Mutation {
  createTicket(createTicketInput: CreateTicketInput!): Ticket!
  updateTicket(updateTicketInput: UpdateTicketInput!): Ticket!
  removeTicket(id: Int!): Ticket!
  createTicketType(createTicketTypeInput: CereateTicketTypeInput!): TicketType!
  updateTicketType(updateTicketTypeInput: UpdateTicketType!): TicketType!
  deleteTicketType(id: String!): TicketType!
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  updateProductOrderNo(updateProductOrderNoInput: UpdateProductGlobalOrderNoInput!): String!
  deleteProduct(productId: String!): String!
  removeProductVariant(id: Int!): ProductVariant!
  updateProductVariant(updateProductVariantInput: UpdateProductVariantInput!): ProductVariant!
  createFavourite(createFavouriteInput: CreateFavouriteInput!): Favourite!
  updateFavourite(updateFavouriteInput: UpdateFavouriteInput!): Favourite!
  removeFavourite(id: String!): String!
  createArea(createAreaInput: CreateAreaInput!): Area!
  updateArea(updateAreaInput: UpdateAreaInput!): Area!
  removeArea(id: Int!): Area!
  createCity(createCityInput: CreateCityInput!): City!
  updateCity(updateCityInput: UpdateCityInput!): City!
  removeCity(id: Int!): City!
  registerUser(createCustomerInput: CreateCustomerInput!): AuthResponseDto!
  updateUser(updateCustomerInput: UpdateCustomerDto!): Customer!
  deleteUser(deleteCustomerInput: DeleteCustomerInput!): Customer!
  resetPassword(phone: String!, password: String!): String!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(updateAddressInput: UpdateAddressInput!): Address!
  removeAddress(id: String!): Address!
  createSlider(createSliderInput: CreateSliderInput!): Slider!
  createSliderType(createSliderType: CreateSliderTypeInput!): SliderType!
  createBrand(createBrandInput: CreateBrandInput!): Brand!
  createRating(createRatingInput: CreateRatingInput!): Rating!
  deleteRating(id: String!): String!
  updateRating(updateRatingInput: UpdateRatingInput!): Rating!
  removeRating(id: Int!): Rating!
  createPromoCode(createPromoCodeInput: CreatePromoCodeInput!): PromoCode!
  validatePromoCode(code: String!, orderFinalAmount: Float!): PromoCode!
  createCart(createCartInput: CreateCartInput!): Cart!
  updateCart(updateCartInput: UpdateCartInput!): Cart!
  removeCart(id: String!): Cart!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrderStatus(updateOrderInput: UpdateOrderInput!): String!
  removeOrder(id: Int!): Order!
  createProductAttribute(createProductAttributeInput: CreateProductAttributeInput!): ProductAttribute!
  createProductAttributeSet(createProductAttributeInput: CreateProductAttributeSetInput!): ProductAttributeSet!
  createProductFaq(createProductFaqInput: CreateProductFaqInput!): ProductFaq!
  updateProductFaq(updateProductFaqInput: UpdateProductFaqInput!): ProductFaq!
  removeProductFaq(id: Int!): ProductFaq!
  createAramic(createAramicInput: CreateAramicInput!): Aramic!
  updateAramic(updateAramicInput: UpdateAramicInput!): Aramic!
  removeAramic(id: Int!): Aramic!
  createFaq(createFaqInput: CreateFaqInput!): Faq!
  createAdminFaq(faqAdminInput: FaqAdminInput!): Faq!
  sendOtp(mobile: String!): String!
  createSection(createSectionInput: CreateSectionInput!): Section!
  createSeller(createSellerInput: CreateSellerInput!): Seller!
  updateSeller(updateSellerInput: UpdateSellerInput!): Seller!
  signinSeller(password: String!, phone: String!): SellerAuthResponse!
  createMedia(createMediaInput: CreateMediaInput!): Media!
  updateMedia(updateMediaInput: UpdateMediaInput!): Media!
  removeMedia(id: String!): Media!
  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): Transaction!
  removeTransaction(id: Int!): Transaction!
  createWithdrawal(createWithdrawalInput: CreateWithdrawalInput!): Withdrawal!
  updateWithdrawal(updateWithdrawalInput: UpdateWithdrawalInput!): Withdrawal!
  removeWithdrawal(id: Int!): Withdrawal!
  createNotification(createNotificationInput: CreateNotificationInput!): Notification!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): Notification!
  removeNotification(id: Int!): Notification!
  createFlashSell(createFlashSellInput: CreateFlashSellInput!): FlashSell!
  updateFlashSell(updateFlashSellInput: UpdateFlashSellInput!): FlashSell!
  removeFlashSell(id: Int!): FlashSell!
  createHotDeal(createHotDealInput: CreateHotDealInput!): String!
  updateHotDeal(updateHotDealInput: UpdateHotDealInput!): HotDeal!
  removeHotDeal(id: Int!): HotDeal!
}

input CreateTicketInput {
  ticket_type: String!
  subject: String!
  email: String!
  description: String!
}

input UpdateTicketInput {
  ticket_type: String
  subject: String
  email: String
  description: String
  id: String!
  status: TicketTypeEnum = PENDING
}

input CereateTicketTypeInput {
  title: String!
}

input UpdateTicketType {
  title: String!
  id: String!
}

input CreateProductInput {
  seller: String!
  pro_input_name: String!
  short_description: String!

  """Comma seperated string"""
  tags: String
  variant: String
  indicator: HalalIndicator = NONE
  made_in: String
  brand: String
  total_allowed_quantity: Float
  minimum_order_quantity: Float
  quantity_step_size: Float
  warranty_period: String
  guarantee_period: String
  download_allowed: Float
  download_link_type: String
  pro_input_zip: Upload
  download_link: String
  is_returnable: Float
  is_cancelable: Float
  cancelable_till: CancelableTill
  pro_input_image: String!
  other_images: [String!]
  video_type: VideoType
  video: String
  pro_input_description: String
  extra_input_description: String

  """comma separated string"""
  attributes: [ProductAttributeInput!]
  category: String!
  status: Float
  product_type: String
  variant_stock_level_type: VariantStockLavelEnum

  """Product Variants Details"""
  createProductVariantInput: [CreateProductVariantInput!]!
}

enum HalalIndicator {
  NONE
  HALAL
  NON_HALAL
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

enum CancelableTill {
  RECEIVED
  PROCESSED
  SHIPPED
}

enum VideoType {
  NONE
  SELF_HOSTED
  VIMEO
  YOUTUBE
}

input ProductAttributeInput {
  attribute: String!
  values: [String!]!
}

enum VariantStockLavelEnum {
  PRODUCT_LEVEL
  VARIABLE_LEVEL
}

input CreateProductVariantInput {
  """Regular Price"""
  price: Float!

  """Price after discount"""
  specialPrice: Float

  """Unit (kg)"""
  weight: Float

  """"""
  height: Float

  """"""
  breadth: Float

  """"""
  length: Float

  """Stock Keeping Unit"""
  sku: String

  """"""
  totalStock: Float

  """"""
  stockStatus: StockStatus

  """If variants is missing it will be general variant"""
  attributeReference: [String!]

  """If variants is missing it will be general variant"""
  attributeValues: [String!]
  stockType: String!
  productType: String
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
}

input UpdateProductInput {
  seller: String
  pro_input_name: String
  short_description: String

  """Comma seperated string"""
  tags: String
  variant: String
  indicator: HalalIndicator = NONE
  made_in: String
  brand: String
  total_allowed_quantity: Float
  minimum_order_quantity: Float
  quantity_step_size: Float
  warranty_period: String
  guarantee_period: String
  download_allowed: Float
  download_link_type: String
  pro_input_zip: Upload
  download_link: String
  is_returnable: Float
  is_cancelable: Float
  cancelable_till: CancelableTill
  pro_input_image: String
  other_images: [String!]
  video_type: VideoType
  video: String
  pro_input_description: String
  extra_input_description: String

  """comma separated string"""
  attributes: [ProductAttributeInput!]
  category: String
  status: Float
  product_type: String
  variant_stock_level_type: VariantStockLavelEnum

  """Product Variants Details"""
  createProductVariantInput: [CreateProductVariantInput!]
  id: Int!
}

input UpdateProductGlobalOrderNoInput {
  productArray: [UpdateProductGlobalOrderNoInputObject!]!
}

input UpdateProductGlobalOrderNoInputObject {
  _id: String!
  globalOrderNo: Float!
}

input UpdateProductVariantInput {
  id: String!
  quantity: Float!
  type: String!
}

input CreateFavouriteInput {
  product_id: String
  user_Id: String
}

input UpdateFavouriteInput {
  product_id: String
  user_Id: String
  id: String!
}

input CreateAreaInput {
  area_name: String!
  city_id: String!
  minimum_free_delivery_order_amount: Float!
  delivery_charges: Float!
}

input UpdateAreaInput {
  area_name: String
  city_id: String
  minimum_free_delivery_order_amount: Float
  delivery_charges: Float
  id: Int!
}

input CreateCityInput {
  city_name: String
}

input UpdateCityInput {
  city_name: String
  id: Int!
}

input CreateCustomerInput {
  name: String!
  email: String
  mobile_no: String!
  password: String!
  country_code: String!
  currency: String!
  language: String!
  dob: DateTime
  height: Float
  weight: Float
  shoe_size: Float
  favourite_k_pop_group: String
  flavor: String
  referral_code: String
  friends_code: String
}

input UpdateCustomerDto {
  user_id: String!
  username: String
  mobile_no: String
  email: String
  address: String
  area: String
  city: String
  referral_code: String
  old: String
  new: String
  image: Upload
}

input DeleteCustomerInput {
  mobile: String!
  password: String!
}

input CreateCategoryInput {
  name: String!
  image: Upload
  banner: Upload
  parent: String
}

input CreateAddressInput {
  user_id: String!
  type: String
  name: String
  country_code: String
  alternate_mobile: String
  address: String
  landmark: String
  area_id: String
  city_id: String
  city_name: String
  area_name: String
  pincode_name: String
  pincode: String
  state: String
  country: String
  is_default: Int
}

input UpdateAddressInput {
  user_id: String
  type: String
  name: String
  country_code: String
  alternate_mobile: String
  address: String
  landmark: String
  area_id: String
  city_id: String
  city_name: String
  area_name: String
  pincode_name: String
  pincode: String
  state: String
  country: String
  is_default: Int
  id: String!
}

input CreateSliderInput {
  slider_type: String
  image: Upload
  type: String
  link: String
  category: String
  product: String
}

input CreateSliderTypeInput {
  type: String!
  type_id: Float!
}

input CreateBrandInput {
  name: String!
  image: String
}

input CreateRatingInput {
  product_id: String
  user_id: String
  rating: Float
  comment: String
  images: [ImageInput!]
  imageUrl: [String!]
}

input ImageInput {
  image: Upload
}

input UpdateRatingInput {
  product_id: String
  user_id: String
  rating: Float
  comment: String
  images: [ImageInput!]
  imageUrl: [String!]
  id: Int!
}

input CreatePromoCodeInput {
  promoCode: String!
  message: String!
  image: Upload!
  discountType: DiscountType!
  discountAmount: Float!
  startDate: DateTime!
  endDate: DateTime!
  minOrderAmount: Float!
  maxOrderAmount: Float!
  numberOfUsers: Float!
  repeatUsage: RepeatUsage!
  numberOfRepeatUsage: Float! = 0
  isCashBack: Boolean! = false
  status: ActiveStatus!
}

input CreateCartInput {
  product_variant_id: String!
  is_saved_for_later: Float! = 0
  qty: Float! = 1
}

input UpdateCartInput {
  cartId: String!
  qty: Float!
}

input CreateOrderInput {
  mobile: String!
  product_variants: [String!]!
  quantity: [Float!]!
  total: Float!
  delivery_charge: Float!
  final_total: Float!
  promo_code: String
  promo_discount: Float
  payment_method: String!
  address_id: String!
  is_wallet_used: Float! = 0
  wallet_balance_used: Float! = 0
  order_note: String
  documents: [String!]
  email: String
}

input UpdateOrderInput {
  order_id: String!
  status: String!
}

input CreateProductAttributeInput {
  name: String
  attributeSet: String!
  values: [ProductAttributeValueInput!]
}

input ProductAttributeValueInput {
  type: ProductAttributeValueType!
  valueName: String!
  image: String
  color: String
}

input CreateProductAttributeSetInput {
  attributeSetName: String!
}

input CreateProductFaqInput {
  productId: String!
  question: String!
  ans: String!
}

input UpdateProductFaqInput {
  productId: String
  question: String
  ans: String
  id: Int!
}

input CreateAramicInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateAramicInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateFaqInput {
  product: String!
  question: String!
}

input FaqAdminInput {
  product: String!
  question: String!
  ans: String
}

input CreateSectionInput {
  title: String!
  description: String!
  categories: [String!]
  style: SectionStyle! = DEFAULT
  productType: ProductTypes! = CUSTOM_PRODUCT
  products: [String!]
}

input CreateSellerInput {
  name: String!
  mobile: String!
  email: String!
  password: String!
  address: String!
  address_proof: Upload
  national_identity_card: Upload
  business_license: Upload
  account_number: String!
  account_name: String!
  bank_code: String!
  bank_name: String!
}

input UpdateSellerInput {
  name: String
  mobile: String
  email: String
  password: String
  address: String
  address_proof: Upload
  national_identity_card: Upload
  business_license: Upload
  account_number: String
  account_name: String
  bank_code: String
  bank_name: String
  id: String!
  status: SellerStatusEnum
}

enum SellerStatusEnum {
  ACTIVE
  INACTIVE
}

input CreateMediaInput {
  file: Upload
  name: String
  extension: String
  subDirectory: String
  size: Float
}

input UpdateMediaInput {
  file: Upload
  name: String
  extension: String
  subDirectory: String
  size: Float
  id: Int!
}

input CreateTransactionInput {
  type: TransactionType!
  amount: Float!
  status: TransactionStatusEnum!
  message: String!
}

input UpdateTransactionInput {
  type: TransactionType
  amount: Float
  status: TransactionStatusEnum
  message: String
  id: Int!
}

input CreateWithdrawalInput {
  paymentDetails: String!
  amountRequested: Float!
}

input UpdateWithdrawalInput {
  paymentDetails: String
  amountRequested: Float
  id: Int!
}

input CreateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateFlashSellInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateFlashSellInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateHotDealInput {
  products: [String!]!
  validTime: DateTime!
  discountPercent: Float!
}

input UpdateHotDealInput {
  products: [String!]
  validTime: DateTime
  discountPercent: Float
  id: Int!
}